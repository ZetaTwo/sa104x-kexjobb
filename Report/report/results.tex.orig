\section{Results}

<<<<<<< HEAD
\subsection{Resulting Code and Performance}
=======
\subsection{Performance (TODO)}
>>>>>>> Fixed small errors in report.

Code:
TODO: Detta skrivs när/om vi blir klara med koden

Performance:
TODO: Fixa detta om vi lyckas få en fungerande version.

\subsection{Comments on the Documentation}

The overall impression of the documentation was that it contained all
information needed to implement the verifier. There were, however,
errors affecting the execution of the verifier. Some of (beror på hur
långt vi kommer med implementeringen) the problems arising from these
errors were overcome after discussion with Wikström. See Appendix B
for a complete list with errors found and specific comments about the
report.

In the absolute beginning of the document, the reader is thrown into
details about the zero-knowledge proofs used in VMN. A more gentle
approach would be to introduce the VMN without assuming too much
acquaintance with it or provide the means for the reader to do so on
his or her own. It would also be appreciated if the document contained
a description of Pedersen commitments.

The background, including a description of a mix-net based on the El
Gamal cryptosystem, is clear and concise. After the background, the
document contains a list of manageable subtasks in order to facilitate
implementation. This list was appreciated as it gave someone
unacquainted with Verificatum ideas of suitable starting points.

Chapters 4 through 6 contain necessary and easily accessible
information. However, chapter 4 on byte trees and chapter 6 on
representation of arithmetic objects are closely related and could
advantageously be presented together while bringing up the
cryptographic primitives of chapter 5 afterwards. The part on deriving
group elements from random strings depends on chapter 5 and
consequently needs to be presented after. See Appendix C for a
clarification on these comments.

Chapter 6.6 on Marshalling Groups contains specific details regarding
the Verificatum software with strong connections to Java. This chapter
could be rephrased to only include information actually needed for
implementation of a verifier.

Lastly, the chapter on verification of Fiat-Shamir proofs relies
heavily on the derivation of group elements from random strings. By
moving chapter 7 to before the chapter on cryptographic primitives,
usage of the document will probably demand less page turns.

\subsection{Conclusion}

Regarding the programming it would have helped with having more layers
of abstractions in the code. Specifically, some classes representing
various mathematical objects, such as group elements, would have made
the code easier to maintain. We believe that a more solid
understanding of the structure of VMN before we started programming
would have helped in creating a better structure of the verifier. The
choices of third party libraries were good and they were all easy to
use in our project. This also makes the amount of code which need to
be written smaller.

The specification document for the verifier does include all the
information required to write the verifier. However, the structure
could be improved for greater readability. There is also some
unnecessary information in the document. Lastly, the document could
benefit from an improved description of the VMN so that one easier can
get a better understanding of what approach to take when implementing
the verifier.

To conclude, the document contains all the information needed for the
implementation of a verifier. However, without the use of test data
the difficulty of implementing a verifier is greatly increased.



