#include "DecryptionFactorsVerifier.h"

#include "Node.h"
#include "RO.h"
#include "PRG.h"
#include "H_SHA.h"
#include "ElGamal.h"
#include "Utilities.h"

bool DecryptionFactorsVerifier(const int j, const proofStruct &ps, const Node &f, const Node &tauDec, const Node &sigmaDec, const Node &w) {

    
    //Step 1
    for(unsigned int i=0; i<ps.lambda; ++i)
    {
	    // a)
	    Node tauDeci = tauDec.getNodeChild(i);

	    IntLeaf y_prime = tauDeci.getIntLeafChild(0);
        Node B_prime;
        if(ps.width == 1) {
            B_prime.addChild(tauDeci.getNodeChild(1));
        } else {
            B_prime = tauDeci.getNodeChild(1);
        }

	    if(!isElemOfGq(ps.Gq, y_prime) ||
	       !isElemOfMw(ps, B_prime)) 
	    {
	        return false;
	    }
    
	    // b)
	    IntLeaf sigmaDeci = sigmaDec.getIntLeafChild(i);
	
	    if(!isElemOfZn(ps.Gq.getIntLeafChild(0), sigmaDeci))
	    {
	        return false;
	    }
    }

	//Step 2
	//Construct seed
	Node seed, seed_a, seed_b;
	seed_a.addChild(ps.Gq.getIntLeafChild(2));
	seed_a.addChild(w);
	seed_b.addChild(ps.y);
	seed_b.addChild(f);
	seed.addChild(seed_a);
	seed.addChild(seed_b);

	bytevector seed_data = ps.rho;
	bytevector seed_data2 = seed.serialize();
	seed_data.insert(seed_data.end(), seed_data2.begin(), seed_data2.end());

	/*unsigned char sarray[] = { 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x80, 0x18, 0x3A, 0xAC, 0x76, 0xA4, 0xCC, 0xE9, 0xD3, 0xE7, 0xE4, 0x33, 0x1C, 0xDF, 0x52, 0x0C, 0xAF, 0xD6, 0x78, 0x49, 0x00, 0xF3, 0x2A, 0x70, 0xD5, 0xB5, 0xC6, 0xFA, 0x13, 0x4A, 0xC6, 0xE0, 0xC1, 0x4A, 0xBB, 0xB0, 0x8E, 0x5C, 0xF7, 0x33, 0x43, 0x11, 0x2A, 0x14, 0x10, 0xBD, 0xB5, 0xA6, 0x16, 0xAD, 0xC5, 0xE6, 0x2C, 0x5F, 0xAD, 0xBC, 0xB5, 0xCA, 0x1D, 0x46, 0x36, 0xFE, 0x03, 0x91, 0xDE, 0x3F, 0x97, 0xAA, 0xD6, 0x9A, 0x91, 0xDF, 0x49, 0x80, 0xDB, 0x92, 0x67, 0xBB, 0xF8, 0x45, 0xB1, 0x91, 0xA4, 0x01, 0x19, 0x43, 0xE2, 0x35, 0x6B, 0x70, 0xEE, 0x84, 0x18, 0x1E, 0x51, 0x06, 0xA1, 0x22, 0x11, 0x79, 0x0B, 0x8E, 0xAC, 0x74, 0x52, 0x76, 0x6E, 0xBA, 0x54, 0xE9, 0xFD, 0x95, 0xDC, 0x9F, 0xE6, 0x83, 0x65, 0x5F, 0x36, 0xEB, 0x47, 0xAC, 0x2B, 0xD8, 0x64, 0x9E, 0xF0, 0xC0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x80, 0x10, 0x61, 0x3C, 0x3E, 0xF0, 0x52, 0x34, 0x76, 0xFF, 0x5A, 0x49, 0x8C, 0x2C, 0xA8, 0x20, 0xB7, 0x38, 0x33, 0x3B, 0x1F, 0x22, 0x17, 0xA5, 0x69, 0xAB, 0x46, 0x36, 0xE5, 0x75, 0x3B, 0x8F, 0xB1, 0xA8, 0xEE, 0x8E, 0x72, 0xF8, 0x77, 0xAE, 0x10, 0xC9, 0x7E, 0x4F, 0x5C, 0x4C, 0x9C, 0xBA, 0x44, 0x1E, 0x75, 0xF0, 0x55, 0x08, 0x21, 0x30, 0xC9, 0x59, 0xAD, 0x0F, 0x1B, 0x60, 0x74, 0x83, 0x90, 0xBB, 0xE7, 0x4C, 0x64, 0x5D, 0x5D, 0x34, 0x11, 0x54, 0x23, 0x37, 0x36, 0x56, 0x10, 0xB7, 0xC0, 0x36, 0x61, 0xBA, 0x85, 0x5E, 0xAF, 0x87, 0xD4, 0xB1, 0x16, 0x30, 0xA7, 0xAC, 0x3A, 0x7E, 0x9D, 0xF9, 0x41, 0x14, 0xA7, 0x43, 0x1E, 0x5B, 0x7D, 0xD8, 0x8C, 0xFD, 0x09, 0x0B, 0xB7, 0x5C, 0x6B, 0x7F, 0x29, 0x0B, 0x55, 0x04, 0xA3, 0x9C, 0x6A, 0x03, 0xDC, 0x2E, 0xA0, 0x58, 0xBD, 0x34, 0x2A, 0x01, 0x00, 0x00, 0x00, 0x80, 0xBC, 0x2D, 0x1C, 0xD8, 0x94, 0xFC, 0x11, 0xDE, 0x0D, 0xB7, 0xD1, 0xDE, 0xFB, 0x1F, 0x32, 0x34, 0x83, 0xDA, 0xB0, 0x6F, 0x56, 0x1E, 0x3A, 0x84, 0xD6, 0xB2, 0x2B, 0x31, 0xD3, 0x05, 0x4E, 0xCE, 0x31, 0xA6, 0xF7, 0x82, 0x0B, 0x7D, 0x7E, 0xD5, 0x77, 0x63, 0xA6, 0x8C, 0x93, 0x70, 0x3A, 0x54, 0xED, 0x40, 0x35, 0x92, 0xA3, 0xFC, 0x4D, 0xA4, 0x91, 0xF6, 0xCD, 0x7A, 0x88, 0x95, 0x41, 0xDC, 0xE4, 0xD9, 0xBB, 0x3A, 0x82, 0xD2, 0xA1, 0xBC, 0xC7, 0x6C, 0xCB, 0x01, 0xE5, 0x94, 0x88, 0x10, 0xCA, 0xBF, 0x84, 0x92, 0xA8, 0xDC, 0xEF, 0x2D, 0x6C, 0xE8, 0xCA, 0xF6, 0xA9, 0xF2, 0x75, 0xC9, 0xA7, 0x6F, 0x49, 0xF1, 0x65, 0xF8, 0xFC, 0x48, 0x44, 0xCF, 0xD1, 0xAF, 0xDC, 0xFD, 0x91, 0x02, 0x37, 0xBA, 0xC1, 0x93, 0xAD, 0x5B, 0x41, 0x7B, 0xC6, 0x69, 0x1C, 0xA5, 0x1C, 0xE4, 0xC5, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x80, 0xDD, 0xC0, 0x86, 0x0F, 0xD1, 0xA4, 0x78, 0xA9, 0x9A, 0x8C, 0xB0, 0x27, 0xAA, 0xEA, 0x0B, 0x4E, 0x42, 0xE7, 0x94, 0x27, 0x52, 0xD8, 0x2C, 0x60, 0xD1, 0x52, 0x35, 0xE0, 0xAC, 0x73, 0x67, 0x39, 0x94, 0xCF, 0x26, 0xE7, 0x44, 0xF1, 0xC5, 0x8A, 0x3E, 0x2A, 0xF4, 0xC4, 0xD3, 0xC3, 0xFC, 0x2C, 0xA1, 0x46, 0x99, 0x56, 0x08, 0xA4, 0xFB, 0x97, 0xC9, 0x2E, 0x3C, 0xCC, 0x7F, 0x7B, 0x89, 0x72, 0x8B, 0x49, 0xAE, 0x59, 0xB1, 0xB9, 0x70, 0x6E, 0xAE, 0xEC, 0x13, 0x43, 0xEB, 0xC1, 0x8B, 0xA3, 0xB7, 0x60, 0x49, 0x0C, 0xA8, 0xC6, 0xA2, 0xF6, 0x73, 0x54, 0x1D, 0x46, 0x25, 0xAB, 0xAD, 0xD7, 0xB8, 0xD4, 0xF2, 0x12, 0x4B, 0x8F, 0xD9, 0x7D, 0xBB, 0x94, 0x23, 0xD6, 0xCE, 0x75, 0x68, 0x9F, 0xCC, 0x00, 0x3F, 0x5B, 0x37, 0xDE, 0xF0, 0x60, 0x14, 0x7F, 0xB8, 0x25, 0x1C, 0x6C, 0x6E, 0x38, 0x01, 0x00, 0x00, 0x00, 0x80, 0x47, 0x5A, 0x83, 0x37, 0x0A, 0x7A, 0xF3, 0x39, 0x61, 0x16, 0xAC, 0x8A, 0x77, 0x01, 0xD1, 0x19, 0x04, 0x1F, 0x61, 0x3B, 0x0E, 0x37, 0x59, 0x93, 0xF5, 0x32, 0xC9, 0xC1, 0x36, 0xB3, 0xFC, 0x72, 0x76, 0xA3, 0xC5, 0xD6, 0x95, 0xAD, 0x23, 0x38, 0xEC, 0x37, 0x0B, 0x0F, 0xF6, 0x43, 0x22, 0xA7, 0xBF, 0x36, 0xD8, 0xE3, 0x00, 0xD5, 0xA8, 0x9B, 0x4C, 0x04, 0xC8, 0x1E, 0x86, 0xDF, 0x38, 0xB2, 0xDC, 0x37, 0xB9, 0xC1, 0xAA, 0x33, 0x26, 0xE5, 0x67, 0x16, 0x93, 0x33, 0xFC, 0x73, 0xA6, 0x44, 0xD6, 0x83, 0xEB, 0xE9, 0x6D, 0xA5, 0x0D, 0xCB, 0x7F, 0xF5, 0x4C, 0x17, 0xCC, 0xC4, 0xC0, 0x0B, 0xC4, 0x7A, 0xE3, 0xFD, 0xF5, 0xC0, 0xA5, 0xBF, 0xC3, 0x15, 0x1F, 0x00, 0x6D, 0x4D, 0xA2, 0x28, 0x63, 0xA2, 0xD6, 0xB3, 0xFF, 0x51, 0xEE, 0xE0, 0x9B, 0x74, 0xC7, 0x83, 0x5B, 0xEB, 0xB9, 0x1E, 0x01, 0x00, 0x00, 0x00, 0x80, 0xCB, 0xEA, 0x09, 0x45, 0xF1, 0xA2, 0x6D, 0xF7, 0x1A, 0xAC, 0x5A, 0xA7, 0x58, 0xF7, 0x78, 0x51, 0x7E, 0x77, 0x3F, 0x8F, 0x67, 0x54, 0x82, 0x7F, 0x86, 0xBE, 0xDD, 0x52, 0x42, 0x97, 0x5F, 0x04, 0x77, 0xB4, 0xFF, 0x66, 0x5B, 0xDF, 0x27, 0xAE, 0xD2, 0x5E, 0xDE, 0x74, 0xCE, 0x0A, 0xC8, 0x4C, 0x47, 0x49, 0xD0, 0x6D, 0xB2, 0x9D, 0x42, 0x49, 0xBE, 0x39, 0x00, 0x02, 0x1E, 0x51, 0x41, 0xED, 0xB6, 0xF9, 0x04, 0x98, 0x3E, 0x14, 0x63, 0x48, 0x3E, 0x50, 0x31, 0x5A, 0xCB, 0x14, 0xC5, 0x08, 0xC4, 0x00, 0x47, 0x34, 0x9E, 0x04, 0x78, 0x96, 0xE3, 0xB9, 0x45, 0x7D, 0x51, 0xC6, 0xE0, 0x58, 0x2E, 0xB9, 0x72, 0x5C, 0xA8, 0xE7, 0xC5, 0x84, 0x55, 0xE9, 0x35, 0xC8, 0xE3, 0xDD, 0x44, 0x42, 0x6B, 0x35, 0x61, 0xB7, 0x96, 0xF0, 0x60, 0xAC, 0x82, 0x90, 0x15, 0x32, 0x8A, 0xDA, 0xB8, 0x12, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x80, 0x79, 0x2C, 0xC7, 0x58, 0x0B, 0x7F, 0xF6, 0xA8, 0x84, 0x40, 0xBE, 0x7A, 0x62, 0xEA, 0xFC, 0xE3, 0x59, 0xCF, 0x79, 0x16, 0x59, 0x56, 0x22, 0xBD, 0xAB, 0x53, 0x53, 0xEF, 0x45, 0x21, 0x81, 0xDD, 0x0A, 0x5C, 0xAF, 0x98, 0x57, 0x51, 0xE9, 0x5C, 0x69, 0x9C, 0xF8, 0x2B, 0xF5, 0x94, 0x99, 0x7E, 0xF4, 0x7E, 0xDB, 0x3B, 0x77, 0x16, 0xD1, 0xB2, 0xEF, 0xE1, 0x05, 0xB3, 0xBE, 0xC9, 0xA5, 0xBB, 0xFC, 0x05, 0x8E, 0xF6, 0xF5, 0x32, 0xF5, 0x8A, 0x0B, 0xB7, 0x4F, 0x45, 0x45, 0x70, 0xF0, 0xB5, 0x46, 0x24, 0x8F, 0xEA, 0x85, 0xD4, 0x4A, 0x74, 0x40, 0x35, 0xDC, 0x00, 0xAC, 0x2B, 0x6B, 0x46, 0xE9, 0x4B, 0x4D, 0x16, 0xB7, 0x87, 0x50, 0x83, 0x22, 0xF7, 0xF5, 0xA1, 0x8A, 0x0B, 0xD6, 0x03, 0x33, 0xD8, 0x0E, 0x73, 0x33, 0xE7, 0x9A, 0x6F, 0x5A, 0xA5, 0x78, 0xEB, 0xBD, 0x6B, 0x87, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x80, 0x4F, 0xB9, 0xB3, 0xF3, 0x73, 0xF1, 0x32, 0x16, 0x01, 0x21, 0x4D, 0xBA, 0x56, 0xCB, 0xC0, 0x36, 0x7B, 0xF5, 0x19, 0x93, 0x89, 0x6C, 0xB3, 0x9C, 0xAC, 0x48, 0x18, 0x88, 0xAA, 0xB8, 0x59, 0x89, 0xEB, 0x97, 0xF6, 0x3F, 0xA4, 0xF4, 0xB4, 0x67, 0x43, 0x55, 0x27, 0xA9, 0x87, 0x57, 0x37, 0xA9, 0x5C, 0x21, 0x04, 0x10, 0x91, 0x30, 0xF7, 0x31, 0xCC, 0x83, 0x2A, 0xBA, 0x81, 0x75, 0xE0, 0xBE, 0xFC, 0x22, 0xD7, 0xF8, 0x42, 0xAB, 0xA7, 0x1D, 0x27, 0xB1, 0x3A, 0xF7, 0xFA, 0xB8, 0x30, 0xB1, 0xA9, 0x9C, 0xFD, 0x70, 0xBD, 0xD7, 0xE1, 0xC5, 0xAF, 0x61, 0x5A, 0xF8, 0xEC, 0x6D, 0xBA, 0x91, 0x1E, 0x77, 0xAF, 0x31, 0xC4, 0x09, 0xD3, 0xA9, 0xC3, 0xD4, 0x25, 0xC3, 0x86, 0x45, 0x02, 0xB7, 0x1E, 0x02, 0xC5, 0x8A, 0x1C, 0xC6, 0xBC, 0xAE, 0x65, 0xF2, 0x90, 0xFC, 0xC8, 0xAF, 0x71, 0x21, 0x01, 0x00, 0x00, 0x00, 0x80, 0x51, 0xCA, 0xF3, 0x56, 0xAD, 0x86, 0x40, 0xC5, 0xCB, 0x3F, 0x80, 0x63, 0x52, 0x04, 0x5E, 0xE6, 0x65, 0x01, 0x4D, 0xCC, 0xC7, 0xE0, 0xAE, 0x05, 0x6E, 0x97, 0x74, 0x31, 0xED, 0x0C, 0xC5, 0xB1, 0xAE, 0xBA, 0x7E, 0xDD, 0xA7, 0x8A, 0x7B, 0xF1, 0x53, 0x8B, 0x78, 0x1F, 0x39, 0x2C, 0x6C, 0x8F, 0x3F, 0xC5, 0x1C, 0xDA, 0xA9, 0xA6, 0x94, 0x3A, 0xAB, 0x94, 0xEE, 0xDC, 0x10, 0xA9, 0xB6, 0xF2, 0x00, 0xFD, 0x08, 0x3D, 0x9A, 0x00, 0xA5, 0x63, 0xC6, 0x58, 0x6E, 0xAB, 0xE0, 0x5D, 0x48, 0x67, 0x34, 0x99, 0x28, 0xD3, 0x67, 0xB3, 0x66, 0x75, 0x05, 0xFC, 0xFA, 0xF0, 0xF0, 0x2B, 0xCA, 0x70, 0xDC, 0xF3, 0xAE, 0x9E, 0x0F, 0xFD, 0xEE, 0x04, 0x7C, 0xA8, 0x5B, 0x40, 0x3E, 0x13, 0x7F, 0x89, 0xF4, 0x50, 0xF5, 0x8E, 0x2C, 0xCB, 0x25, 0xCE, 0x26, 0x14, 0xBA, 0xC4, 0x56, 0xFB, 0xB4, 0x4D, 0x01, 0x00, 0x00, 0x00, 0x80, 0xD5, 0x0C, 0x2A, 0x88, 0x90, 0x0D, 0xB9, 0x4C, 0x53, 0xF8, 0xD5, 0xFA, 0x32, 0x7D, 0x6F, 0x16, 0xCE, 0x74, 0x0C, 0x01, 0x2B, 0xB1, 0x37, 0xBE, 0x0E, 0x50, 0xD5, 0xBB, 0x68, 0xDB, 0xC1, 0x98, 0x3A, 0x5F, 0x8B, 0x1D, 0x39, 0x43, 0xC7, 0xE8, 0xF4, 0x34, 0x05, 0xB8, 0x2D, 0xE8, 0xB0, 0x8A, 0x15, 0xAA, 0x91, 0x4A, 0x19, 0xEB, 0xE1, 0xE0, 0x94, 0x34, 0xD5, 0x56, 0x3E, 0x42, 0xD7, 0x9C, 0x2F, 0xE9, 0x8F, 0xB5, 0xF8, 0x4D, 0x38, 0xFD, 0x7F, 0x70, 0x88, 0xDC, 0xF5, 0x1D, 0xE0, 0xFA, 0x27, 0x7F, 0xFB, 0x99, 0xFC, 0x34, 0x14, 0x80, 0x49, 0xBA, 0x75, 0x10, 0xF7, 0x53, 0x5D, 0x80, 0x9D, 0xBF, 0x6F, 0x0C, 0x4E, 0xA7, 0x7E, 0xD5, 0xFF, 0x2C, 0x6C, 0x31, 0xAD, 0xEA, 0x92, 0xEE, 0x45, 0xA5, 0x31, 0x36, 0xF7, 0x99, 0xDF, 0x30, 0x48, 0x2F, 0xEF, 0x88, 0x1C, 0x41, 0x3D, 0x1C, 0x01, 0x00, 0x00, 0x00, 0x80, 0x1A, 0x9E, 0x45, 0x13, 0x87, 0x77, 0x13, 0x76, 0x88, 0xDF, 0x1B, 0x47, 0x16, 0x0C, 0xB0, 0xBE, 0x51, 0x69, 0xD2, 0x87, 0x92, 0xB6, 0x05, 0xC8, 0x15, 0xF3, 0x67, 0x6B, 0x76, 0xBE, 0x18, 0xDB, 0x73, 0x69, 0xB1, 0x4C, 0x11, 0x71, 0x8B, 0x18, 0x01, 0xA1, 0xD2, 0x6B, 0xF3, 0x4A, 0x16, 0x9D, 0x99, 0xD9, 0x48, 0x15, 0x4A, 0xF1, 0x10, 0x15, 0x54, 0x38, 0x0B, 0x9D, 0xF3, 0xB2, 0x76, 0x0E, 0xFF, 0x55, 0xA8, 0x4A, 0xA1, 0xC2, 0xF6, 0xEF, 0x21, 0x70, 0x32, 0x49, 0x3C, 0xDD, 0x2B, 0x17, 0x82, 0x0E, 0xC5, 0xEF, 0x67, 0x41, 0x32, 0xA4, 0xCF, 0xBA, 0x7D, 0xBD, 0xA0, 0x4D, 0x29, 0xC2, 0x4C, 0xD8, 0x98, 0xBE, 0x25, 0x90, 0x82, 0xED, 0x1B, 0xAA, 0xAB, 0xE7, 0x20, 0xCF, 0x2A, 0x16, 0x20, 0xCE, 0xF9, 0xE5, 0x48, 0x87, 0xF8, 0x7F, 0xB5, 0x8F, 0x8F, 0x4B, 0xFA, 0xE4, 0x53, 0x57, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x80, 0x7A, 0x35, 0x42, 0x0F, 0x4F, 0x7F, 0xF2, 0xC3, 0x6E, 0x10, 0x03, 0x61, 0xE2, 0x3E, 0x47, 0x57, 0x71, 0x74, 0xC9, 0xC7, 0x5B, 0x1B, 0x5C, 0x61, 0x55, 0x4C, 0xED, 0x0B, 0x0F, 0xF9, 0x5D, 0x9D, 0xBA, 0x1D, 0xDE, 0x82, 0x2E, 0x5E, 0x53, 0x7F, 0x30, 0x50, 0xFF, 0x6C, 0xD5, 0x88, 0xAD, 0x8A, 0x4D, 0xA2, 0x25, 0x37, 0xCC, 0xB1, 0x3C, 0xAA, 0xEF, 0x46, 0x9A, 0xE2, 0x12, 0xCF, 0x9C, 0x59, 0x69, 0x2B, 0x53, 0x1A, 0x8E, 0x53, 0x1B, 0x47, 0x46, 0xCB, 0x0A, 0x9F, 0x34, 0x70, 0x36, 0x87, 0xE4, 0xEA, 0x08, 0x3B, 0x58, 0x11, 0x7C, 0x03, 0x72, 0xC7, 0x00, 0x22, 0xF3, 0x0D, 0xEE, 0xDD, 0xB7, 0x85, 0xF6, 0x16, 0x61, 0x44, 0xF8, 0x43, 0x21, 0x91, 0x76, 0x7B, 0xAC, 0x80, 0x6D, 0x55, 0xFD, 0x44, 0xCA, 0x78, 0xCE, 0xEA, 0xFF, 0xF8, 0x56, 0x3E, 0x62, 0x76, 0xBC, 0x00, 0x74, 0x7A, 0x01, 0x00, 0x00, 0x00, 0x80, 0x7C, 0xDD, 0xFF, 0x8A, 0x39, 0x4F, 0x6D, 0xA9, 0xE2, 0xF6, 0xB6, 0x3B, 0xED, 0x6B, 0x58, 0x6F, 0xFF, 0x60, 0xE2, 0x9D, 0xBC, 0x8D, 0x16, 0x35, 0x07, 0xD8, 0x29, 0x64, 0x76, 0x83, 0x3B, 0xDB, 0x65, 0xC9, 0xED, 0x6E, 0xAB, 0x26, 0xA1, 0xAE, 0x67, 0x1A, 0x76, 0xB6, 0xE4, 0xAB, 0x7C, 0xD4, 0xDE, 0xBE, 0xE7, 0xA1, 0x82, 0xB7, 0x13, 0x36, 0x15, 0x52, 0xBC, 0x95, 0x4B, 0xB9, 0xEB, 0xCE, 0x0B, 0x2D, 0x9F, 0x90, 0x30, 0xFD, 0x52, 0xBD, 0x69, 0xF4, 0xBE, 0x68, 0x87, 0xD3, 0x90, 0x26, 0x32, 0x88, 0x07, 0x0E, 0x4F, 0x1F, 0xDE, 0xB5, 0x9A, 0x93, 0x57, 0x47, 0x6B, 0xE0, 0xFC, 0x1D, 0xA1, 0xB5, 0x28, 0x56, 0xE7, 0xEC, 0x66, 0x09, 0x13, 0xDF, 0x81, 0x93, 0x9E, 0xD8, 0x6E, 0x75, 0x55, 0x38, 0xC4, 0x04, 0x63, 0xF8, 0x95, 0xEB, 0xB7, 0xAD, 0x18, 0xF3, 0x62, 0xCC, 0xA9, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x80, 0x81, 0x5C, 0x54, 0x93, 0xDC, 0xAE, 0x00, 0xA1, 0xD1, 0xB8, 0x74, 0xEF, 0x6A, 0x79, 0xEB, 0x6E, 0x27, 0xDF, 0xCF, 0xCB, 0xCE, 0x6C, 0xB1, 0x11, 0x61, 0x65, 0x74, 0x6D, 0x00, 0x90, 0x95, 0xC7, 0x1F, 0x86, 0xA8, 0x51, 0xF6, 0x36, 0x93, 0xD1, 0xD5, 0x7C, 0x77, 0xBB, 0xC3, 0x98, 0xF2, 0xB6, 0x25, 0x55, 0xC1, 0x4F, 0x8E, 0xD8, 0x6F, 0x45, 0x55, 0xF5, 0xD5, 0x51, 0xE7, 0xE8, 0xBE, 0x19, 0x96, 0x01, 0xFB, 0x6D, 0x14, 0xC6, 0xA0, 0xC4, 0x93, 0xC4, 0x57, 0x01, 0x0C, 0xB7, 0x37, 0x0C, 0xFF, 0x67, 0xEC, 0x29, 0xF6, 0x4D, 0x83, 0x04, 0x2B, 0x41, 0xCD, 0xD9, 0x1E, 0x28, 0x28, 0x24, 0x0B, 0xDF, 0x56, 0x2A, 0xA9, 0x54, 0x8E, 0xC8, 0x96, 0x85, 0xB7, 0x19, 0xEE, 0x5A, 0xAE, 0x89, 0x7E, 0xE1, 0x44, 0xD3, 0xF2, 0xF4, 0x2F, 0x27, 0x43, 0xDB, 0x54, 0xF8, 0x76, 0xC7, 0x15, 0x70, 0x01, 0x00, 0x00, 0x00, 0x80, 0xA0, 0x91, 0x5D, 0xE9, 0x4D, 0x43, 0x6F, 0xF9, 0xB9, 0xD3, 0xDF, 0x1C, 0x35, 0xF5, 0x3D, 0x10, 0xF3, 0x3C, 0xAF, 0x69, 0xD7, 0x20, 0x3B, 0xFA, 0xE9, 0xF3, 0x10, 0x64, 0x7D, 0x2F, 0x81, 0x8D, 0xFE, 0x5C, 0x58, 0x16, 0x51, 0xB8, 0x4D, 0xE6, 0x7B, 0x28, 0x6B, 0x66, 0x8B, 0x2B, 0xE2, 0x17, 0x73, 0xB9, 0x93, 0x7A, 0x7F, 0x65, 0x92, 0x83, 0x5A, 0x7E, 0xBA, 0xC2, 0x3E, 0xAA, 0x06, 0x9B, 0xC8, 0x97, 0x39, 0xC7, 0xF1, 0xD4, 0xA7, 0xD8, 0x67, 0x29, 0x7A, 0x27, 0x9D, 0x93, 0x0B, 0x88, 0x64, 0xDD, 0xAC, 0x82, 0xFF, 0xEB, 0x16, 0x7E, 0x5E, 0x4E, 0xD9, 0x24, 0xCC, 0x15, 0xA3, 0x48, 0x4A, 0xBB, 0x7E, 0xB0, 0x02, 0x82, 0xD3, 0x64, 0x01, 0x9B, 0xF4, 0x81, 0x77, 0xDE, 0x82, 0x3E, 0xED, 0x0F, 0x19, 0x7C, 0x94, 0x7C, 0xA8, 0x97, 0xFB, 0xA2, 0x16, 0x4C, 0xAA, 0x79, 0xB7, 0xD6, 0x01, 0x00, 0x00, 0x00, 0x80, 0x28, 0x15, 0xF0, 0x4F, 0x29, 0xB2, 0xCD, 0xFA, 0x52, 0x11, 0x56, 0x83, 0xF9, 0x02, 0xBF, 0x47, 0x3F, 0x94, 0xFE, 0x83, 0x66, 0x28, 0xAA, 0xA8, 0x72, 0xB2, 0x2A, 0x4C, 0x44, 0xD8, 0xB5, 0x3C, 0x0F, 0x50, 0x9A, 0xCE, 0x19, 0x61, 0x53, 0xE2, 0xBB, 0xFE, 0x20, 0xC3, 0x62, 0x02, 0x54, 0x71, 0x83, 0xFB, 0x82, 0x59, 0x6B, 0x79, 0xA3, 0x8E, 0x6D, 0x8A, 0x8E, 0x9D, 0x2B, 0x1C, 0xAD, 0xF0, 0x93, 0xEC, 0x07, 0x3F, 0x7A, 0xC4, 0x8B, 0x22, 0x96, 0x9C, 0x9A, 0xF0, 0xA6, 0x76, 0x9D, 0x61, 0x79, 0x34, 0x1E, 0x85, 0x5C, 0x95, 0x2D, 0xD4, 0xF9, 0x76, 0x0F, 0x6C, 0x60, 0xC4, 0x85, 0xAA, 0xBB, 0xC1, 0x12, 0xE3, 0x6C, 0x23, 0xD8, 0x4B, 0x8F, 0xDB, 0x1C, 0xB4, 0x9C, 0xAC, 0xF2, 0x15, 0x33, 0x86, 0x47, 0x6C, 0x6F, 0x76, 0x9E, 0xCB, 0x44, 0xE7, 0xAD, 0xB8, 0xCE, 0x1C, 0x72, 0x64, 0x01, 0x00, 0x00, 0x00, 0x80, 0x83, 0x23, 0xD2, 0x58, 0xC3, 0xC3, 0x00, 0x12, 0x0E, 0xD5, 0xCE, 0xF0, 0x15, 0x3B, 0x2C, 0xF5, 0xED, 0xE3, 0x58, 0x6F, 0x29, 0x7F, 0x7D, 0x10, 0x60, 0xF7, 0x04, 0x63, 0xBC, 0xAE, 0x2D, 0x9D, 0x18, 0xDD, 0x26, 0x2E, 0x59, 0x56, 0xFA, 0x4B, 0x8A, 0xBF, 0xC0, 0x7F, 0xEB, 0x06, 0x03, 0xD6, 0x21, 0xA9, 0x00, 0x20, 0x5A, 0x76, 0x3B, 0x18, 0x41, 0x73, 0x29, 0xE1, 0x9A, 0x10, 0xB4, 0xFD, 0x41, 0x94, 0xD2, 0xC2, 0xCC, 0xF2, 0xF6, 0x6A, 0x2E, 0x2A, 0xE4, 0x9B, 0xD8, 0x9D, 0x60, 0x2C, 0x77, 0xF4, 0xC0, 0x37, 0xC6, 0xA8, 0x4D, 0x21, 0x28, 0x2B, 0x5E, 0x74, 0xFC, 0x56, 0x8C, 0x42, 0x91, 0x15, 0x88, 0x88, 0x13, 0x96, 0xBC, 0x80, 0x6E, 0x06, 0x6D, 0x53, 0x9D, 0xAF, 0x96, 0xC4, 0xED, 0xA2, 0xED, 0x8A, 0x82, 0xE3, 0x68, 0x90, 0xC2, 0x7F, 0x96, 0xA4, 0xC5, 0x2D, 0x82, 0xF9, 0x01, 0x00, 0x00, 0x00, 0x80, 0xBB, 0x4C, 0xB2, 0x77, 0x0B, 0x2A, 0x7D, 0x0C, 0xFE, 0xA7, 0x52, 0x04, 0xFC, 0x80, 0x65, 0xD7, 0xA2, 0x47, 0x72, 0xA9, 0x5F, 0xE8, 0x0B, 0x09, 0xD4, 0x31, 0x67, 0x44, 0x8D, 0x18, 0xD0, 0x05, 0xD0, 0x86, 0x7A, 0x22, 0x33, 0x6B, 0x5B, 0xC0, 0x86, 0xB5, 0x3A, 0xD7, 0x36, 0xDC, 0x3A, 0x5A, 0x26, 0xC6, 0x1A, 0xD4, 0xAC, 0xB7, 0x23, 0x3F, 0xFB, 0x40, 0x5A, 0x44, 0x18, 0x89, 0x2C, 0x8B, 0xE2, 0xE6, 0x01, 0xE2, 0xF0, 0xCC, 0x01, 0x6C, 0x6D, 0x5D, 0x74, 0x51, 0xB8, 0x68, 0x1D, 0xAB, 0xD6, 0xA6, 0x30, 0x4D, 0xE9, 0xA6, 0x15, 0x86, 0x2C, 0x3A, 0xE9, 0x2B, 0x22, 0xDF, 0xC6, 0x4A, 0xF0, 0x64, 0xF5, 0x70, 0x41, 0x0E, 0xFE, 0x43, 0x2D, 0x24, 0x81, 0x0E, 0x65, 0xF5, 0xA3, 0x59, 0xCA, 0x2D, 0x0B, 0x3F, 0x10, 0x4A, 0x52, 0x07, 0xA3, 0xB2, 0xE6, 0x36, 0xAC, 0x1B, 0x56, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x80, 0x4F, 0xB5, 0xBB, 0x19, 0xA1, 0x1F, 0xB7, 0x32, 0xCE, 0x45, 0xF1, 0x6C, 0x5F, 0x35, 0x2D, 0x9B, 0xA9, 0x51, 0xCD, 0x87, 0x93, 0x9E, 0x4A, 0x96, 0x3D, 0x5F, 0xFE, 0xC6, 0xF8, 0x0F, 0x95, 0x9D, 0x24, 0x7D, 0xA3, 0xA4, 0x9C, 0xBE, 0x82, 0x1F, 0x65, 0xCE, 0x54, 0x57, 0xC4, 0xC7, 0x41, 0xF5, 0x5E, 0x5E, 0x9E, 0xE9, 0xB6, 0xF8, 0xCF, 0x9B, 0x50, 0x9C, 0xE1, 0xED, 0x97, 0x4F, 0x46, 0xFE, 0x96, 0xB5, 0x7C, 0xCB, 0x80, 0x2B, 0x86, 0x64, 0xF7, 0xB1, 0xF4, 0x39, 0xAC, 0x88, 0xB0, 0x3A, 0xCA, 0x4B, 0x67, 0xC7, 0xB2, 0x95, 0x7F, 0x9A, 0xF8, 0x20, 0x9F, 0x27, 0x9B, 0x69, 0xA4, 0x0C, 0xCD, 0x0D, 0x9F, 0x99, 0x59, 0x5D, 0x40, 0x2D, 0x80, 0x8D, 0xF4, 0xEC, 0x44, 0xF0, 0xDA, 0xE3, 0xFF, 0x3B, 0x91, 0xA5, 0xBC, 0x60, 0x55, 0xD4, 0xE8, 0x2B, 0xEA, 0xD7, 0x38, 0xC6, 0xC2, 0x72, 0x01, 0x00, 0x00, 0x00, 0x80, 0x9A, 0x4D, 0xDD, 0xE0, 0x93, 0xBA, 0xB6, 0x33, 0xDE, 0xC6, 0x0B, 0x1D, 0x97, 0x4D, 0xA7, 0x90, 0x65, 0x40, 0xE1, 0xDA, 0x85, 0x86, 0x1C, 0xA8, 0xAE, 0xD1, 0xC2, 0x2D, 0x0E, 0x7B, 0x80, 0x9F, 0xCB, 0x6F, 0x87, 0xBF, 0x64, 0xA9, 0x31, 0xEF, 0x1A, 0xDE, 0x4E, 0xB4, 0x7D, 0x09, 0x64, 0x95, 0xA2, 0xF6, 0xC1, 0xFE, 0x5E, 0x8F, 0xC4, 0xF0, 0x32, 0x1C, 0x1D, 0x3A, 0x80, 0xDE, 0xEF, 0x78, 0x7C, 0xC6, 0x0C, 0xE4, 0xD7, 0x7E, 0xF4, 0x89, 0xDB, 0x73, 0x4A, 0xD9, 0x48, 0x2D, 0x71, 0x9E, 0xEF, 0x3C, 0xB2, 0xFA, 0x2E, 0x8A, 0x9A, 0xD6, 0x83, 0xE2, 0xAC, 0xAA, 0x5E, 0xE9, 0x91, 0xB5, 0xB8, 0x6C, 0x74, 0x83, 0x9D, 0xD3, 0xC7, 0x4D, 0xBD, 0x53, 0xC3, 0xDD, 0xB5, 0x80, 0xDC, 0x12, 0x70, 0x53, 0xCD, 0xD0, 0x06, 0x4E, 0x04, 0x16, 0x58, 0x79, 0x9C, 0xC2, 0xAA, 0x1A, 0x33, 0x3C, 0x01, 0x00, 0x00, 0x00, 0x80, 0xCE, 0xB0, 0xA5, 0xAF, 0x04, 0xE8, 0x8C, 0x36, 0xFC, 0xDD, 0x21, 0xD0, 0x55, 0x61, 0x24, 0x4E, 0x49, 0x21, 0x0D, 0x9D, 0x1D, 0xDD, 0x58, 0xC3, 0xA9, 0x9E, 0xCE, 0xF7, 0xEC, 0x3D, 0x75, 0xE0, 0x6F, 0xB8, 0x0D, 0xB1, 0x11, 0xF8, 0xAF, 0x7E, 0x3F, 0xD3, 0x5E, 0xFB, 0x01, 0x2F, 0x9A, 0xFC, 0x22, 0xD8, 0xBD, 0xBF, 0x9B, 0x1E, 0x3D, 0x68, 0x50, 0x89, 0x6A, 0xC9, 0x9F, 0xC8, 0xC0, 0x0B, 0xDC, 0x53, 0x65, 0xA1, 0x5B, 0x4A, 0xB0, 0x0A, 0xCE, 0x09, 0x70, 0x3F, 0x21, 0x14, 0x53, 0x00, 0xDA, 0xBC, 0x76, 0xE5, 0x16, 0xCB, 0x30, 0x0F, 0x52, 0xD1, 0xC5, 0xFE, 0x9A, 0x75, 0x90, 0x88, 0x39, 0x8B, 0xAC, 0xC7, 0x1D, 0xA1, 0x5E, 0x35, 0x6D, 0x51, 0xB7, 0xBD, 0x9D, 0xF0, 0xE4, 0x14, 0x7A, 0xCC, 0xD3, 0x0E, 0x8A, 0x7F, 0xF8, 0x0E, 0x02, 0x37, 0x3F, 0xF1, 0xFC, 0x6E, 0xD4, 0x74, 0x01, 0x00, 0x00, 0x00, 0x80, 0xB2, 0x63, 0xB6, 0x61, 0xC1, 0x45, 0x0B, 0x45, 0x17, 0x9E, 0x09, 0x6D, 0x51, 0xD1, 0xFF, 0xED, 0xAE, 0xE2, 0xE0, 0xDF, 0x4E, 0x97, 0x5D, 0x82, 0xBA, 0x84, 0xB9, 0xF8, 0x99, 0x7A, 0xC3, 0xF0, 0x35, 0x11, 0x19, 0xC0, 0x58, 0x3A, 0x30, 0x86, 0x76, 0x9E, 0xAB, 0xD6, 0x51, 0x32, 0x6C, 0xDC, 0x82, 0x39, 0x15, 0x50, 0x1B, 0xDA, 0xD9, 0x97, 0x99, 0xD9, 0x7A, 0xC1, 0xF9, 0xBF, 0xB4, 0x7A, 0x78, 0x60, 0x6C, 0x1F, 0xE2, 0x82, 0xC2, 0x63, 0x34, 0xA1, 0xC6, 0x1B, 0xED, 0x7A, 0x2D, 0x5F, 0xF0, 0xB1, 0x16, 0x7D, 0x5F, 0x93, 0x0B, 0xAB, 0x9F, 0x00, 0x99, 0x66, 0x53, 0xD2, 0x64, 0xFB, 0x85, 0x83, 0x1B, 0x2A, 0x92, 0x38, 0xC3, 0xA1, 0x91, 0x73, 0xD0, 0x9B, 0x82, 0x8E, 0xD1, 0x2D, 0x2C, 0xAE, 0x5B, 0x47, 0x5D, 0x46, 0x25, 0xB6, 0x72, 0x33, 0xD1, 0xFE, 0x09, 0x62, 0xCE, 0x3F, 0x01, 0x00, 0x00, 0x00, 0x80, 0x59, 0xC3, 0x0F, 0x82, 0x2F, 0xEE, 0x54, 0x04, 0xE9, 0x76, 0xB4, 0x31, 0x69, 0xC0, 0x09, 0x74, 0x52, 0x1C, 0x84, 0x89, 0x57, 0x8F, 0x06, 0xD0, 0x17, 0x19, 0x48, 0xEE, 0xB2, 0x0D, 0xFF, 0xBA, 0xDA, 0x50, 0xF7, 0x14, 0x03, 0x7F, 0x5C, 0x08, 0xCC, 0x84, 0xDD, 0x2E, 0xA0, 0xF9, 0xB4, 0x1C, 0x33, 0xFB, 0x1E, 0xC4, 0x56, 0xDD, 0xD8, 0x4A, 0x04, 0x18, 0xB8, 0x17, 0x45, 0x2A, 0x58, 0x34, 0xA4, 0x9B, 0xEA, 0xB0, 0x4E, 0x82, 0xC1, 0xA1, 0x4A, 0x37, 0xE7, 0x4D, 0x92, 0x16, 0x35, 0xC0, 0x3C, 0xCB, 0x62, 0x9D, 0x0A, 0xBB, 0xDF, 0xE2, 0x08, 0xEA, 0x52, 0x06, 0x44, 0x28, 0x65, 0x57, 0xB6, 0x81, 0xEF, 0xCE, 0xCA, 0xCF, 0x5D, 0x45, 0xC5, 0x51, 0x35, 0xDA, 0x7F, 0xB8, 0x20, 0x23, 0x5D, 0xFD, 0xF7, 0x8D, 0x95, 0x0C, 0xE4, 0x51, 0x24, 0xE0, 0x84, 0xC9, 0x47, 0x52, 0x73, 0xBC };
	bytevector seed_data;
	seed_data.insert(seed_data.end(), sarray, sarray+3109);*/

    RO RO_seed(ps.hash, ps.nH);
	IntLeaf s = RO_seed(seed_data);

    //TODO: sdata blir fel!
	std::string p_data = ps.Gq.getIntLeafChild(0).serializeString();
	std::string ss_data = seed.serializeString();
    std::string sdata = s.serializeString();
    std::string ydata = ps.y.serializeString();
    std::string pkdata = ps.pk.serializeString();
    std::string xdata = ps.x.serializeString();

	//Step 3
	PRG prg(H_SHA256, s.toVector(), ps.nH);
	Node t;
	for (unsigned int i = 0; i < ps.N; i++)
	{
		t.addChild(prg.next());
	}
	IntLeaf mod(2);
	mod.expTo(ps.nE);
	Node e = t.mod(mod);

	//Step 4
	Node challenge;
	challenge.addChild(s);
	challenge.addChild(tauDec);

	bytevector challenge_data = ps.rho;
	bytevector challenge_data2 = challenge.serialize();
	challenge_data.insert(challenge_data.end(), challenge_data2.begin(), challenge_data2.end());

	RO RO_challenge(ps.hash, ps.nV);
	IntLeaf v = RO_challenge(challenge_data);

	//Step 5
	IntLeaf p = ps.Gq.getIntLeafChild(0);
	Node u = w.getChildren(0);
	Node yPrime = tauDec.getChildren(0);
	IntLeaf A = u.expMultMod(e, p);
	if(j == 0) {

		Node Bnode;
		for (int i = 0; i < f.getLength(); i++)
		{
			Bnode.addChild(f.getChildren(i).prodMod(p));
		}
		IntLeaf B = Bnode.expMultMod(e, p);
		
		IntLeaf x = sigmaDec.sumMod(p);

		IntLeaf cond1left = ps.pk.prodMod(p).expMod(v, p) * yPrime.prodMod(p);
		IntLeaf cond1right = ps.Gq.getIntLeafChild(2).expMod(x, p);

		IntLeaf cond2left = B.expMod(v, p) * tauDec.getChildren(1).prodMod(p);
		IntLeaf cond2right = PDec(x, A, p);

		return cond1left == cond1right && cond2left == cond2right;
	} else {
		IntLeaf Bj = f.getChildren(j).expMultMod(e, p);

		IntLeaf x = sigmaDec.getIntLeafChild(j);

		IntLeaf cond1left = ps.pk.getIntLeafChild(j).expMod(v, p) * yPrime.getIntLeafChild(j);
		IntLeaf cond1right = ps.Gq.getIntLeafChild(2).expMod(x, p);

		IntLeaf cond2left = Bj.expMod(v, p) * tauDec.getIntLeafChild(j);
		IntLeaf cond2right = PDec(x, A, p);

		return cond1left == cond1right && cond2left == cond2right;
	}

	return true;
}
