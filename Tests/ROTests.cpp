#include <gtest/gtest.h>

#include "H_SHA.h"
#include "RO.h"

//RandomOracle Hashfunction "SHA-256" 65
TEST(ROTests, TestVector256_65) {
	unsigned char input_data[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
									0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
									0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
									0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };

	unsigned char expected_data[] = { 0x00, 0x1a, 0x8d, 0x6b, 0x6f, 0x65, 0x89, 0x9b, 0xa5 };

	bytevector input;
	input.insert(input.end(), input_data, input_data+32);

	bytevector expected;
	expected.insert(expected.end(), expected_data, expected_data+9);

	bytevector result;

	RO ro(H_SHA256, 65);
	result = ro(input).toVector();

	EXPECT_EQ(expected, result);
}

TEST(ROTests, TestVector256_261) {
	unsigned char input_data[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
									0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
									0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
									0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };

	unsigned char expected_data[] = { 0x1c, 0x04, 0xf5, 0x7d, 0x5f, 0x58, 0x56, 0x82, 
										0x4b, 0xca, 0x3a, 0xf0, 0xca, 0x46, 0x6e, 0x28,
										0x35, 0x93, 0xbf, 0xc5, 0x56, 0xae, 0x2e, 0x9f,
										0x48, 0x29, 0xc7, 0xba, 0x8e, 0xb7, 0x6d, 0xb8, 0x78 };

	bytevector input;
	input.insert(input.end(), input_data, input_data+32);

	bytevector expected;
	expected.insert(expected.end(), expected_data, expected_data+33);

	bytevector result;

	RO ro(H_SHA256, 261);
	result = ro(input).toVector();

	EXPECT_EQ(expected, result);
}

TEST(ROTests, TestVector384_93) {
	unsigned char input_data[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
									0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
									0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
									0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };

	unsigned char expected_data[] = { 0x04, 0x71, 0x3a, 0x5e, 0x22, 0x93, 0x58, 0x33, 0xd4, 0x36, 0xd1, 0xdb };

	bytevector input;
	input.insert(input.end(), input_data, input_data+32);

	bytevector expected;
	expected.insert(expected.end(), expected_data, expected_data+12);

	bytevector result;

	RO ro(H_SHA384, 93);
	result = ro(input).toVector();

	EXPECT_EQ(expected, result);
}

TEST(ROTests, TestVector384_411) {
	unsigned char input_data[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
									0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
									0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
									0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };

	unsigned char expected_data[] = { 0x00, 0xdc, 0x08, 0x6c, 0x32, 0x0e, 0x38, 0xb9,
										0x27, 0x22, 0xa9, 0xc0, 0xf8, 0x7f, 0x2f, 0x5d,
										0xe8, 0x1b, 0x97, 0x64, 0x00, 0xe2, 0x44, 0x1d,
										0xa5, 0x42, 0xd1, 0xc3, 0xf3, 0xf3, 0x91, 0xe4,
										0x1d, 0x6b, 0xcd, 0x82, 0x97, 0xc5, 0x41, 0xc2,
										0x43, 0x1a, 0x72, 0x72, 0x49, 0x1f, 0x49, 0x6b,
										0x62, 0x22, 0x66, 0xaa };

	bytevector input;
	input.insert(input.end(), input_data, input_data+32);

	bytevector expected;
	expected.insert(expected.end(), expected_data, expected_data+52);

	bytevector result;

	RO ro(H_SHA384, 411);
	result = ro(input).toVector();

	EXPECT_EQ(expected, result);
}

TEST(ROTests, TestVector512_111) {
	unsigned char input_data[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
									0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
									0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
									0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };

	unsigned char expected_data[] = { 0x28, 0xd7, 0x42, 0xc3, 0x4b, 0x97, 0x36, 0x7e, 0xb9, 0x68, 0xa3, 0xf2, 0x8b, 0x6c };

	bytevector input;
	input.insert(input.end(), input_data, input_data+32);

	bytevector expected;
	expected.insert(expected.end(), expected_data, expected_data+14);

	bytevector result;

	RO ro(H_SHA512, 111);
	result = ro(input).toVector();

	EXPECT_EQ(expected, result);
}

TEST(ROTests, TestVector512_579) {
	unsigned char input_data[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
									0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
									0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
									0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };

	unsigned char expected_data[] = { 0x00, 0xa6, 0xf7, 0x9b, 0x84, 0x50, 0xfe, 0xf7,
										0x9a, 0xf7, 0x10, 0x05, 0xc0, 0xb1, 0x02, 0x8c,
										0x9f, 0x02, 0x5f, 0x32, 0x2f, 0x14, 0x85, 0xc2,
										0xb2, 0x45, 0xf6, 0x58, 0xfe, 0x64, 0x1d, 0x47,
										0xdc, 0xbb, 0x4f, 0xe8, 0x29, 0xe0, 0x30, 0xb5,
										0x2e, 0x4a, 0x81, 0xca, 0x35, 0x46, 0x6a, 0xd1,
										0xca, 0x9b, 0xe6, 0xfe, 0xcc, 0xb4, 0x51, 0xe7,
										0x28, 0x9a, 0xf3, 0x18, 0xdd, 0xc9, 0xda, 0xe0,
										0x98, 0xa5, 0x47, 0x5d, 0x61, 0x19, 0xff, 0x6f,
										0xe0 };

	bytevector input;
	input.insert(input.end(), input_data, input_data+32);

	bytevector expected;
	expected.insert(expected.end(), expected_data, expected_data+73);

	bytevector result;

	RO ro(H_SHA512, 579);
	result = ro(input).toVector();

	EXPECT_EQ(expected, result);
}